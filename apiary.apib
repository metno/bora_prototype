FORMAT: X-1A

HOST: https://data.met.no

# MetData API Documentation

MetData API is a *data retrieval* service for retrieving meteorological and oceanographic data at MET. An access token is 
required to use the API.  In order to receive a token, you must first request a token from the *token request page*.

The following documentation covers the core resources that are available in the MetData API. First of all, read the basic instructions
to start using the API.

## Allowed HTTPs requests:

- `POST` - To create a resource/data.
- `PUT` - To update a resource/data.
- `GET` - Get a resource/data or list of resources/data.
- `DELETE` - To delete resource/data.

The vast majority of users will only ever need to use the GET request. POST and PUT are only used if you (or your application) are a
data provider to MET Norway, while the DELETE resource is only used by administrative functions.

## Description Of Usual Server Responses

- 200 `OK` - the request was successful (some API calls may return 201 instead).
- 201 `Created` - the request was successful and a resource was created.
- 400 `Bad Request` - the request could not be understood or was missing required parameters.
- 401 `Unauthorized` - authentication failed or user doesn't have permissions for requested operation.
- 403 `Forbidden` - access denied.
- 404 `Not Found` - resource was not found.
- 503 `Service Unavailable` - service is temporary unavailable (e.g. scheduled Platform Maintenance). Try again later.

In case of errors, the server will also return - as part of the result-set - a human readable text message detailing the issue.


# Group API Root

MetData API entry point.

## /
### GET

This resource does not have any attributes. Instead it offers the initial API affordances in the form of the HTTP Link header and HAL links.

In the real MetData API, the root should serve up HTML pages for the front of the API, providing links to documentation, examples, and licensing, etc.

+ Response 200 (application/hal+json)

    + Headers

            Link: <http:/data.met.no>;rel="self",<http:/data.met.no/observations>;rel="observations"

    + Body

            {
                "_links": {
                    "self": { "href": "/" },
                    "observations": { "href": "/observations?{?datasources,locations,level,referenceTime,validTime,valueParameters,dataVersions,functions,fields,limit,offset,namespace}", "templated": true }
                }
            }

# Group Observation

Observations are one of the key resources in the MetData API. The observations resource can be used to retrieve a wide variety
of data about observations, both individual data measurements as well as time-series.

### Observation Properties  

- source (string)   : ID of the source of the observation.
- place (string)   : EWKT representation of the spatial location that the observation is valid for + level
- reftime (datetime) : Reference time.
- validtime (datetime) : Valid time.
- param (string)   : Parameter of the value of the observation. 
- value (double)   : Value of the observation.
- unit (string)   : Unit of measure of the observation.
- quality (string) : Quality code of the data value.
- version (integer)  : Version of the data value.


## /observations.json{?sources,places,level,reftime,validtime,params,quality,versions,functions,fields,limit,offset,namespace,querytime}
### GET

Retrieve observation data from the API in JSON format. Identical queries can be asked in the API using .csv or .bufr instead of .json.

Querying without parameters (essentially, asking for the entire database) is not permitted and will result in a 400 or 403 error.

One possible function could be timeseries; this would crunch the value, quality, and version information into arrays, with the grouping given by referencetime and the validtime given using interval time. Other typical functions would be on-the fly aggregations. 


+ Parameters

    + sources (list, optional) ... A list of data source IDs that the result should be limited to. If no data sources are specified, all datasources are returned.
    + places (list, optional) ... A list of locations. EWKT (WKT ISO-13249-3:2011 in 3D with spatial reference information and level parameter).
    + reftime (time, optional) ... The referencetime of data required. ISO-8601.
    + validtime (time, optional) ... The validtime of data required. ISO-8601.
    + params (list, optional) ... The value parameters of the data required. New MET parameter standard.
    + quality (code, optional) ... The lowest quality of the data value accepted. MET quality code standard.
    + versions (code, optional) ... The version of the data value (not the same as EPS dataVersion).
    + functions (list, optional) ... Functions to be run over the result, including on-the-fly aggregateion, etc.
    + fields (list, optional) ... Limit the data returned in the return format to only these variables or fields.
    + limit (integer, optional) ... Limit the number of answers. Default (and maximum) depends on user.
    + offset (integer, optional) ... Returns from this offset in the result set.
    + namespace (code, optional) ... Sets the namespace used in the query and the return set.
    + querytime (time, optional) ... Perform the query as if it was executed at this instant in time. Limits the answer to the data that was available at querytime.

+ Response 200 (application/json)

        [
            {
                "source": "KS18700",
                "place": "POINT(55.4 12.3 2);srid=WGS84;altitude",
                "reftime": "2012-03-01T00:00:00Z",
                "validtime": "2012-03-01T00:00:00Z",
                "param": "air_temperature",
                "value": 0.9,
                "quality": 2,
                "version": 2,
                "storetime": "2012-03-01T00:00:05Z"
            },
            {
                "source": "KS18700",
                "place": "POINT(55.4 12.3 2);srid=WGS84;altitude",
                "reftime": "2012-03-02T00:00:00Z",
                "validtime": "2012-03-02T00:00:00Z",
                "param": "air_temperature",
                "value": 1.1,
                "quality": 2,
                "version": 3,
                "storetime": "2012-03-02T00:00:04Z"
            },
            {
                "source": "KS18700",
                "place": "POINT(55.4 12.3 2);srid=WGS84;altitude",
                "reftime": "2012-03-03T00:00:00Z",
                "validtime": "2012-03-03T00:00:00Z",
                "param": "air_temperature",
                "value": 4.5,
                "quality": 1,
                "version": 1,
                "storetime": "2012-03-03T00:00:05Z"
            }
        ]


## /observations.json
### POST

Creates one or more new observation record in the appropriate, underlying data storage.

The user must have appropriate permissions for the operation to be successful, otherwise a 401-unauthorized error is returned.

If an observation record already exists for this data, then a 403-forbidden is returned.

+ Request (application/json)

            {
                "source": "KS18700",
                "place": "POINT(55.4 12.3 2);srid=WGS84;altitude",
                "reftime": "2012-03-01T00:00:00Z",
                "validtime": "2012-03-01T00:00:00Z",
                "param": "air_temperature",
                "value": 4.5,
                "quality": 1,
                "version": 1
            }

+ Response 201 (application/json)

            {
                "source": "KS18700",
                "place": "POINT(55.4 12.3 2);srid=WGS84;altitude",
                "reftime": "2012-03-01T00:00:00Z",
                "validtime": "2012-03-01T00:00:00Z",
                "param": "air_temperature",
                "value": 4.5,
                "quality": 1,
                "version": 2,
                "storetime": "2012-03-01T00:00:05Z"
            }

### PUT

Updates an existing observation record in the relevant underlying data storages.

Returns an error if the observation does not exist from before. Returns an error if the dataVersion submitted does not match with the dataVersion in the data storage (i.e., someone has updated the record since your last retrieval).

+ Request (application/json)

            {
                "source": "KS18700",
                "place": "POINT(55.4 12.3 2);srid=WGS84;altitude",
                "reftime": "2012-03-01T00:00:00Z",
                "validtime": "2012-03-01T00:00:00Z",
                "param": "air_temperature",
                "value": 4.5,
                "quality": 1
            }

+ Response 201 (application/json)

            {
                "source": "KS18700",
                "place": "POINT(55.4 12.3 2);srid=WGS84;altitude",
                "reftime": "2012-03-01T00:00:00Z",
                "validtime": "2012-03-01T00:00:00Z",
                "param": "air_temperature",
                "value": 4.5,
                "quality": 1,
                "version": 2,
                "storetime": "2012-03-01T00:00:05Z"
            }

### DELETE

This will always result in a 403-forbidden error, since data is never deleted through the API in the current design.

+ Response 403

# Group Source
<a id="source" ></a>

Source is a key entity in the MET data model. Source designates the known entity in the system which is closest to the creation of the data and can represent several different kinds of data such as stations, algorithms (models), etc.

## /sources.json{?sources,validtime,fields,limit,offset,namespace}
### GET

+ Response 200

+ Parameters
    + sources (list, optional) ... A list of source IDs that the result should be limited to. If no data providers are specified, all dataProviders are returned.
    + validtime (list, optional) ... The validtime of data required. ISO-8601.
    + fields (list, optional) ... Limit the data returned in the return format to only these variables or fields.
    + limit (integer, optional) ... Limit the number of answers. Default (and maximum) depends on user.
    + offset (integer, optional) ... Returns from this offset in the result set. Need to consider how this is implemented in real-time, distributed data set.
    + namespace (code, optional) ... Sets the namespace used in the query and the return set.


## /sources.json
### POST

Returns an error if the data provider already exists.

+ Request (application/json)

        {
            "source": "KS18700",
            "type": "Climate station",
            ...
        }

+ Response 201 (application/json)

        {
            "source": "KS18700",
            "type": "Climate station",
            ...
        }

### PUT

Returns an error if the data provider does not exist from before.

+ Request (application/json)

        {
            "source": "KS18700",
            "type": "Climate station",
            ...
        }

+ Response 201 (application/json)

        {
            "source": "KS18700",
            "type": "Climate station",
            ...
        }

### DELETE

This will always result in a 403-forbidden error, since data is never deleted through the API in the current design.

+ Response 403


# Group Places
<a id="places" ></a>

Place is a key entity in the MET data model. Source designates the known entity in the system which is closest to the creation of the data and can represent several different kinds of data such as stations, algorithms (models), etc.


Observations are one of the key resources in the MetData API. The observations resource can be used to retrieve a wide variety
of data about observations, both individual data measurements as well as time-series.

## /placess.json{?locations,validTime,fields,limit,offset,namespace}
### GET

+ Response 200

+ Parameters
    + locations (list, optional) ... A list of dataprovider IDs that the result should be limited to. If no data providers are specified, all dataProviders are returned.
    + validTime (list, optional) ... The validtime of data required. ISO-8601.
    + fields (list, optional) ... Limit the data returned in the return format to only these variables or fields.
    + limit (integer, optional) ... Limit the number of answers. Default (and maximum) depends on user.
    + offset (integer, optional) ... Returns from this offset in the result set. Need to consider how this is implemented in real-time, distributed data set.
    + namespace (code, optional) ... Sets the namespace used in the query and the return set.


## /locations.json
### POST

Returns an error if the data provider already exists.

+ Request (application/json)

        { "dataProvider": "BLINDERN", "", ..., "" }

+ Response 201 (application/json)

        { "id": 3, "title": "Buy cheese and bread for breakfast." }

### PUT

Returns an error if the data provider does not exist from before.

+ Request (application/json)

        { "dataProvider": "BLINDERN", "", ..., "" }

+ Response 201 (application/json)

        { "id": 3, "title": "Buy cheese and bread for breakfast." }

### DELETE

Makes a data provider invalid (doesn't delete them).

+ Request (application/json)

        { "dataProvider": "BLINDERN", "", ..., "" }

+ Response 404



# Group Parameter
<a id="locations" ></a>

Observations are one of the key resources in the MetData API. The observations resource can be used to retrieve a wide variety
of data about observations, both individual data measurements as well as time-series.

## /parameters.json{?parameters,validTime,fields,limit,offset,namespace}
### GET

+ Response 200

+ Parameters
    + parameters (list, optional) ... A list of dataprovider IDs that the result should be limited to. If no data providers are specified, all dataProviders are returned.
    + validTime (list, optional) ... The validtime of data required. ISO-8601.
    + fields (list, optional) ... Limit the data returned in the return format to only these variables or fields.
    + limit (integer, optional) ... Limit the number of answers. Default (and maximum) depends on user.
    + offset (integer, optional) ... Returns from this offset in the result set. Need to consider how this is implemented in real-time, distributed data set.
    + namespace (code, optional) ... Sets the namespace used in the query and the return set.


## /parameters.json
### POST

Allows the creation of new parameters in the metadata system.

+ Request (application/json)

        { "dataProvider": "BLINDERN", "", ..., "" }

+ Response 201 (application/json)

        { "id": 3, "title": "Buy cheese and bread for breakfast." }

### PUT

Returns an error if the parameter does not exist from before. Updates a parameter. Should only rarely be used; only to handle changes in the standard or 

+ Request (application/json)

        { "dataProvider": "BLINDERN", "", ..., "" }

+ Response 201 (application/json)

        { "id": 3, "title": "Buy cheese and bread for breakfast." }


### DELETE

Makes a data provider invalid (doesn't delete them).

+ Request (application/json)

        { "dataProvider": "BLINDERN", "", ..., "" }

+ Response 404


# Group Function
<a id="function" ></a>

Functions cannot be inserted, updated or edited.

## /functions.json{?functions,validTime,fields,limit,offset,namespace}
### GET

+ Response 200

+ Parameters
    + functions (list, optional) ... A list of dataprovider IDs that the result should be limited to. If no data providers are specified, all dataProviders are returned.
    + validTime (list, optional) ... The validtime of data required. ISO-8601.
    + fields (list, optional) ... Limit the data returned in the return format to only these variables or fields.
    + limit (integer, optional) ... Limit the number of answers. Default (and maximum) depends on user.
    + offset (integer, optional) ... Returns from this offset in the result set. Need to consider how this is implemented in real-time, distributed data set.
    + namespace (code, optional) ... Sets the namespace used in the query and the return set.

