FORMAT: X-1A

HOST: https://data.met.no


# MET API Documentation

MET API is a *data retrieval* service for retrieving meteorological and oceanographic data at MET. A security token is required to use the API.
In order to receive a token as a public user, you must request a token from the *token request page*. Prioritized and privileged users have
additional constraints and requirements on their use.

The following document provides a quick overview of the resources that are available in the MetData API and its core design. Do not feel
overwhelmed by the massive amount of functionality offered by the API; actual usage will for most users be limited to a minor subset of
this functionality. A *Quick Start* guide to the API should also be written before the API is launched.

## Allowed HTTPs requests:

- `POST` - To create a resource/data.
- `PUT` - To update a resource/data.
- `GET` - Get a resource/data or list of resources/data.
- `DELETE` - To delete resource/data.

The vast majority of users will only ever need to use the GET request. POST and PUT are only used if you (or your application) are a
data provider to MET Norway (privileged user), while the DELETE resource is only used by the internal MET Norway administrators.

## Description Of Usual Server Responses

- 200 `OK` - the request was successful (some API calls may return 201 instead).
- 201 `Created` - the request was successful and a resource was created.
- 400 `Bad Request` - the request could not be understood or was missing required parameters.
- 401 `Unauthorized` - authentication failed or user doesn't have permissions for requested operation.
- 403 `Forbidden` - access denied.
- 404 `Not Found` - resource was not found.
- 503 `Service Unavailable` - service is temporary unavailable (e.g. scheduled Platform Maintenance). Try again later.

In case of errors, the server will also return - as part of the result-set - a human readable text message detailing the issue.


# Group API Root

MetData API entry point.

## /
### GET

This resource does not have any attributes. Instead it offers the initial API affordances in the form of the HTTP Link header and HAL links.

In the real MetData API, the root should serve up HTML pages for the front of the API, providing links to documentation, examples, and licensing, etc.

+ Response 200 (application/hal+json)

    + Headers

            Link: <http:/data.met.no>;rel="self",<http:/data.met.no/observations>;rel="observations"

    + Body

            {
                "_links": {
                    "self": { "href": "/" },
                    "observations": { "href": "/observations?{?datasources,locations,level,referenceTime,validTime,valueParameters,dataVersions,functions,fields,limit,offset,namespace}", "templated": true }
                }
            }

# Group Observation

Observations are one of the key resources in the MetData API. The observations resource can be used to retrieve a wide variety
of data about observations, both individual data measurements as well as time-series.

### Observation Properties  

- source (string)   : ID of the source of the observation.
- place (string)   : EWKT representation of the spatial location that the observation is valid for + level
- reftime (datetime) : Reference time.
- validtime (datetime) : Valid time.
- param (string)   : Parameter of the value of the observation. 
- value (double)   : Value of the observation.
- unit (string)   : Unit of measure of the observation.
- quality (string) : Quality code of the data value.
- version (integer)  : Version of the data value.


## /observations.json{?sources,places,level,reftime,validtime,parameters,quality,versions,functions,fields,limit,offset,namespace,querytime}
### GET

Retrieve observation data from the API in JSON format. Identical queries can be asked in the API using .csv or .bufr instead of .json.

Querying without parameters (essentially, asking for the entire database) is not permitted and will result in a 400 or 403 error.

One possible function could be timeseries; this would crunch the value, quality, and version information into arrays, with the grouping given by referencetime and the validtime given using interval time. Other typical functions would be on-the fly aggregations. 


### Example

In this section, we look at example queries that retrieve values through the API.

Note that the function names are just suggestions; better function designators should be suggested by the scientific personell.

The following query retrieves data from the climate stations identified by climate numbers 18700 and 50540 for august and september only, for three years (2004 - 2006).

> https://data.met.no/observations.json?sources=18700,50540&reftime=R3/2004-08-01T00:00/2004-10-01T00:00/P1Y&parameters=lwe_thickness_of_precipitation_amount,min_air_temperature,max_air_temperature

The following query retrieves monthly means for all months from July 2005 to July 2006.

> https://data.met.no/observations.json?sources=18700,50540&reftime=2005-07-01T00:00/2006-08-01T00:00&parameters=lwe_thickness_of_precipitation_amount,min_air_temperature,max_air_temperature&functions=mean_over_months

The following query gives observations for the 0, 6, 12, and 18 hours UTC for the given period.

> https://data.met.no/observations.json?sources=18700,50540&reftime=R124/2006-01-01T00:00/2006-01-01T00:00/P6H&parameters=lwe_thickness_of_precipitation_amount,min_air_temperature,max_air_temperature

More monthly means over a 30 year period:

> https://data.met.no/observations.json?sources=18700,50540&reftime=1961-01-01T00:00/P30Y&parameters=lwe_thickness_of_precipitation_amount,air_temperature&functions=mean_over_months

Daily means over a 30 year period:

> https://data.met.no/observations.json?sources=18700,50540&reftime=1961-01-01T00:00/P30Y&parameters=lwe_thickness_of_precipitation_amount,air_temperature&functions=mean_over_days

Daily extremes for all data:

> https://data.met.no/observations.json?sources=18700,50540&parameters=lwe_thickness_of_precipitation_amount,max_air_temperature&functions=extremes_per_day

Homogenized monthly values?

> https://data.met.no/observations.json?sources=18700,50540&reftime=2005-07-01T00:00/2006-08-01T00:00&parameters=air_temperature,max_air_temperature&functions=homogenized_mean_over_months

Metars for 12 UTC for September 2008 from SN4780.

> https://data.met.no/observations.json?sources=4780&reftime=R30/2008-09-01T12:00/2008-09-01T12:00/P24H&parameters=air_temperature

Environmental data for 12 UTC, observed from platform SN76920

> https://data.met.no/observations.json?sources=76920&reftime=R30/2008-09-01T12:00/2008-09-01T12:00/P24H&parameters=air_temperature

Extremes over counties:

> https://data.met.no/observations.json?sources=obs_stations&place=norway&parameters=min_air_temperature&functions=extremes_per_county

For this section, we looked at the examples for wdKlima. Time series 11, 14, and 15 in wsKlima require further explanation, however.


### Sources

Sources is a hierarchial dimension, that allows the user to specify source ID from classes/categories of
stations/algorithms, and down to the sensor level.

### Places

Places allows the user to specify both specific coordinates, as well as use named locations (e.g., counties,
cities, etc).

### Time Specification

Our time specification is based on ISO-8601, extended with a couple of features in 

+ Date: YYYY-MM-DD
+ Time: hh:mm:ss
+ Date Time: <date>T<time>
+ Duration: PnYnMnDTnHnMnS
+ Time Interval: <start>/<end>
+ Time Interval: <start>/<duration>
+ Repeating Time Points: R[n]/<interval>
+ Repeating Intervals: R[n]/<interval>/Duration

### Parameters

Parameters are defined according to the MET parameter standard. This standard is an extension of the 
CF-naming convention.

# Definition

+ Parameters

    + sources (list, optional) ... A list of data source IDs that the result should be limited to. If no data sources are specified, all data sources are returned. Sources can also be specified as wildcard/regex strings.
    + places (list, optional) ... A list of locations. EWKT (WKT ISO-13249-3:2011 in 3D with spatial reference information and level parameter).
    + reftime (time, optional) ... The referencetime of data required. ISO-8601.
    + validtime (time, optional) ... The validtime of data required. ISO-8601.
    + parameters (list, optional) ... The value parameters of the data required. New MET parameter standard. Value parameters can be specified as wildcard/regex strings.
    + quality (code, optional) ... The lowest quality of the data value accepted. MET quality code standard.
    + versions (code, optional) ... The version of the data value (not the same as EPS dataVersion).
    + functions (list, optional) ... Functions to be run over the result, including on-the-fly aggregateion, etc.
    + fields (list, optional) ... Limit the data returned in the return format to only these variables or fields.
    + limit (integer, optional) ... Limit the number of answers. Default (and maximum) depends on user.
    + offset (integer, optional) ... Returns from this offset in the result set.
    + namespace (code, optional) ... Sets the namespace used in the query and the return set.
    + querytime (time, optional) ... Perform the query as if it was executed at this instant in time. Limits the answer to the data that was available at querytime.

+ Response 200 (application/json)

        [
            {
                "source": "KS18700",
                "place": "POINT(55.4 12.3 2);srid=WGS84;altitude",
                "reftime": "2012-03-01T00:00:00Z",
                "validtime": "2012-03-01T00:00:00Z",
                "parameter": "air_temperature",
                "value": 0.9,
                "quality": 2,
                "version": 2,
                "storetime": "2012-03-01T00:00:05Z"
            },
            {
                "source": "KS18700",
                "place": "POINT(55.4 12.3 2);srid=WGS84;altitude",
                "reftime": "2012-03-02T00:00:00Z",
                "validtime": "2012-03-02T00:00:00Z",
                "parameter": "air_temperature",
                "value": 1.1,
                "quality": 2,
                "version": 3,
                "storetime": "2012-03-02T00:00:04Z"
            },
            {
                "source": "KS18700",
                "place": "POINT(55.4 12.3 2);srid=WGS84;altitude",
                "reftime": "2012-03-03T00:00:00Z",
                "validtime": "2012-03-03T00:00:00Z",
                "parameter": "air_temperature",
                "value": 4.5,
                "quality": 1,
                "version": 1,
                "storetime": "2012-03-03T00:00:05Z"
            }
        ]


## /observations.json
### POST

Creates one or more new observation record in the appropriate, underlying data storage.

The user must have appropriate permissions for the operation to be successful, otherwise a 401-unauthorized error is returned.

If an observation record already exists for this data, then a 403-forbidden is returned.

+ Request (application/json)

            {
                "source": "KS18700",
                "place": "POINT(55.4 12.3 2);srid=WGS84;altitude",
                "reftime": "2012-03-01T00:00:00Z",
                "validtime": "2012-03-01T00:00:00Z",
                "parameter": "air_temperature",
                "value": 4.5,
                "quality": 1,
                "version": 1
            }

+ Response 201 (application/json)

            {
                "source": "KS18700",
                "place": "POINT(55.4 12.3 2);srid=WGS84;altitude",
                "reftime": "2012-03-01T00:00:00Z",
                "validtime": "2012-03-01T00:00:00Z",
                "parameter": "air_temperature",
                "value": 4.5,
                "quality": 1,
                "version": 2,
                "storetime": "2012-03-01T00:00:05Z"
            }

### PUT

Updates an existing observation record in the relevant underlying data storages.

Returns an error if the observation does not exist from before. Returns an error if the dataVersion submitted does not match with the dataVersion in the data storage (i.e., someone has updated the record since your last retrieval).

+ Request (application/json)

            {
                "source": "KS18700",
                "place": "POINT(55.4 12.3 2);srid=WGS84;altitude",
                "reftime": "2012-03-01T00:00:00Z",
                "validtime": "2012-03-01T00:00:00Z",
                "parameter": "air_temperature",
                "value": 4.5,
                "quality": 1
            }

+ Response 201 (application/json)

            {
                "source": "KS18700",
                "place": "POINT(55.4 12.3 2);srid=WGS84;altitude",
                "reftime": "2012-03-01T00:00:00Z",
                "validtime": "2012-03-01T00:00:00Z",
                "parameter": "air_temperature",
                "value": 4.5,
                "quality": 1,
                "version": 2,
                "storetime": "2012-03-01T00:00:05Z"
            }

### DELETE

This will always result in a 403-forbidden error, since data is never deleted through the API in the current architecture.

+ Response 403

# Group Source
<a id="source" ></a>

Source is a key entity in the MET data model. Source designates the known entity in the system which is closest to the creation of the data and can represent several different kinds of data such as stations, algorithms (models), etc.

As such, the Source resource can be used to access metadata about any of the varying types of data sources that exist at MET.

## /sources.json{?sources,types,validtime,fields,limit,offset,namespace}
### GET

+ Response 200

+ Parameters
    + sources (list, optional) ... A list of source IDs that the result should be limited to. If no sources are specified, all sources are returned.
    + types (list, optional) ... A list of source types that the result should be limited to. 
    + validtime (list, optional) ... The validtime of data required. ISO-8601.
    + fields (list, optional) ... Limit the data returned in the return format to only these variables or fields.
    + limit (integer, optional) ... Limit the number of answers. Default (and maximum) depends on user.
    + offset (integer, optional) ... Returns from this offset in the result set. Need to consider how this is implemented in real-time, distributed data set.
    + namespace (code, optional) ... Sets the namespace used in the query and the return set.


## /sources.json
### POST

Returns an error if the data provider already exists.

+ Request (application/json)

        {
            "source": "KS18700",
            "type": "Climate station",
            ...
        }

+ Response 201 (application/json)

        {
            "source": "KS18700",
            "type": "Climate station",
            ...
        }

### PUT

Returns an error if the data provider does not exist from before.

+ Request (application/json)

        {
            "source": "KS18700",
            "type": "Climate station",
            ...
        }

+ Response 201 (application/json)

        {
            "source": "KS18700",
            "type": "Climate station",
            ...
        }

### DELETE

This will always result in a 403-forbidden error, since data is never deleted through the API in the current design.

+ Response 403


# Group Places
<a id="places" ></a>

Place is a key entity in the MET data model. Source designates the known entity in the system which is closest to the creation of the data and can represent several different kinds of data such as stations, algorithms (models), etc.


Observations are one of the key resources in the MetData API. The observations resource can be used to retrieve a wide variety
of data about observations, both individual data measurements as well as time-series.

## /placess.json{?locations,validTime,fields,limit,offset,namespace}
### GET

+ Response 200

+ Parameters
    + locations (list, optional) ... A list of dataprovider IDs that the result should be limited to. If no data providers are specified, all dataProviders are returned.
    + validTime (list, optional) ... The validtime of data required. ISO-8601.
    + fields (list, optional) ... Limit the data returned in the return format to only these variables or fields.
    + limit (integer, optional) ... Limit the number of answers. Default (and maximum) depends on user.
    + offset (integer, optional) ... Returns from this offset in the result set. Need to consider how this is implemented in real-time, distributed data set.
    + namespace (code, optional) ... Sets the namespace used in the query and the return set.


## /locations.json
### POST

Returns an error if the data provider already exists.

+ Request (application/json)

        { "dataProvider": "BLINDERN", "", ..., "" }

+ Response 201 (application/json)

        { "id": 3, "title": "Buy cheese and bread for breakfast." }

### PUT

Returns an error if the data provider does not exist from before.

+ Request (application/json)

        { "dataProvider": "BLINDERN", "", ..., "" }

+ Response 201 (application/json)

        { "id": 3, "title": "Buy cheese and bread for breakfast." }

### DELETE

Makes a data provider invalid (doesn't delete them).

+ Request (application/json)

        { "dataProvider": "BLINDERN", "", ..., "" }

+ Response 404



# Group Parameter
<a id="locations" ></a>

Observations are one of the key resources in the MetData API. The observations resource can be used to retrieve a wide variety
of data about observations, both individual data measurements as well as time-series.

## /parameters.json{?parameters,validTime,fields,limit,offset,namespace}
### GET

+ Response 200

+ Parameters
    + parameters (list, optional) ... A list of dataprovider IDs that the result should be limited to. If no data providers are specified, all dataProviders are returned.
    + validTime (list, optional) ... The validtime of data required. ISO-8601.
    + fields (list, optional) ... Limit the data returned in the return format to only these variables or fields.
    + limit (integer, optional) ... Limit the number of answers. Default (and maximum) depends on user.
    + offset (integer, optional) ... Returns from this offset in the result set. Need to consider how this is implemented in real-time, distributed data set.
    + namespace (code, optional) ... Sets the namespace used in the query and the return set.


## /parameters.json
### POST

Allows the creation of new parameters in the metadata system.

+ Request (application/json)

        { "dataProvider": "BLINDERN", "", ..., "" }

+ Response 201 (application/json)

        { "id": 3, "title": "Buy cheese and bread for breakfast." }

### PUT

Returns an error if the parameter does not exist from before. Updates a parameter. Should only rarely be used; only to handle changes in the standard or 

+ Request (application/json)

        { "dataProvider": "BLINDERN", "", ..., "" }

+ Response 201 (application/json)

        { "id": 3, "title": "Buy cheese and bread for breakfast." }


### DELETE

Makes a data provider invalid (doesn't delete them).

+ Request (application/json)

        { "dataProvider": "BLINDERN", "", ..., "" }

+ Response 404


# Group Function
<a id="function" ></a>

Functions cannot be inserted, updated or edited.

## /functions.json{?functions,validTime,fields,limit,offset,namespace}
### GET

+ Response 200

+ Parameters
    + functions (list, optional) ... A list of dataprovider IDs that the result should be limited to. If no data providers are specified, all dataProviders are returned.
    + validTime (list, optional) ... The validtime of data required. ISO-8601.
    + fields (list, optional) ... Limit the data returned in the return format to only these variables or fields.
    + limit (integer, optional) ... Limit the number of answers. Default (and maximum) depends on user.
    + offset (integer, optional) ... Returns from this offset in the result set. Need to consider how this is implemented in real-time, distributed data set.
    + namespace (code, optional) ... Sets the namespace used in the query and the return set.


# Group Other Resources
<a id="other" ></a>

The above resources would seem to cover the core requirements of the API. This does not mean that it
covers every conceivable requirement of the API. Elements that could be interesting candidates for
resources in future work:

+ qualityCodes: Allowing for a programmatic retrieval of the specific meaning of each quality code.
+ nameSpaces: Retrieval of namespace metadata. Something that might also be relevant in this context
would be to make namespaces open to be edited by users; essentially crowd-sourcing this element of
the metadata .

Other functionality that might require extensions is the ability to "browse" the data space; 
retrieving information about what data is available, without actually retrieving the data. This does not
necessarily have to be implemented as a resource, however; it may work as well as a function.
